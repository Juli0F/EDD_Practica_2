//request se hace desde una url


package com.mycompany.analizadores;

import java_cup.runtime.*;
import com.mycompany.analizadores.parsers.Comp;
import com.mycompany.analizadores.parsers.Form;
import com.mycompany.analizadores.parsers.Token;
import com.mycompany.analizadores.parsers.Usr;
import com.mycompany.cliente_proyecto.Verificador;
import com.mycompany.analizadores.parsers.Errores;
import com.mycompany.analizadores.parsers.Consulta;

parser code  {:

private String tipoToken;

private Token key;
private Token value;

public void tipoInstruccion(){

	 if (((String)cur_token.value).equalsIgnoreCase("error")) {
        tipoToken = "ERROR";
            System.out.println("Error Tipo Instruccion");
        
    }else{
           String tipo[] =((String)cur_token.value).replace("\"", "").trim().split("_");
        System.out.println("TIPO_INSTRUCCION "+ ((String)cur_token.value));    
            switch (tipo[1].toUpperCase()) {
                case "USUARIO":
                tipoToken = "USUARIO";
                   Usr usr  = new Usr(cur_token.left, cur_token.right, tipo[0].toUpperCase());
                    Verificador.lstInstrucciones.add(usr);
                    break;
                case "COMPONENTE":
                    Comp comp = new Comp(cur_token.left, cur_token.right, tipo[0].toUpperCase());
                    Verificador.lstInstrucciones.add(comp);
                    tipoToken = "COMPONENTE";
                    break;
                case "FORMULARIO":
                    Form form = new Form(cur_token.left, cur_token.right, tipo[0].toUpperCase());
                    Verificador.lstInstrucciones.add(form);
                    tipoToken = "FORMULARIO";
                    break;
                case "DATOS":
                Consulta consulta = new Consulta(cur_token.left, cur_token.right, tipo[0].toUpperCase());
                Verificador.lstInstrucciones.add(consulta);
                tipoToken = "CONSULTA";
                break;
            }
        }
        }
public void crearKeyToken(){
	 key = new Token(cur_token.left, cur_token.right, (String)cur_token.value, cur_token.sym+"");
}
public void crearValueToken(){
 	value = new Token(cur_token.left, cur_token.right, (String)cur_token.value, cur_token.sym+"");
 	
 	Verificador.lstInstrucciones.get(Verificador.contSolicitud).getLstIN().put(key, value);
 	//addKeyValue();
}


 
 
  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error ");

       if (info instanceof java_cup.runtime.Symbol) {

       	 java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            String lexema = (String) s.value;
            String descripcion = "Se Esperaba: ";
            for(Integer token : expected_token_ids()){
            	descripcion = descripcion + " \'"+sym.terminalNames[token]+"\'";	
            }
   	   		
   	   		Verificador.lstErr.add(new Errores("Error Sintactico  "+descripcion,
                                            lexema, s.left + "", s.right + ""));
		
     
    }

    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  

  public void report_fatal_error(String message, Object info) throws Exception{

  	System.out.println("report_fatal: ");
  	
	}
	public void report_fatal_error(Symbol cur)  throws java.lang.Exception {
		System.out.println("report_fatal_error");
	
	}
	public void syntax_error(Symbol cur_token) {
          //  System.out.println("syntax_error: "+cur_token.left);
            report_error( "Error Sintactico", cur_token) ;

        }


        public Symbol getCur_token(){
        	
        	String lexema = (String) cur_token.value;
        	System.out.println("cur_token "+lexema);
                  System.out.println("Linea: "+cur_token.left);
                  System.out.println("COlumna: "+cur_token.right);

           
         
    		return cur_token;
		}

:};


action code{: 




:}

//cabeceras xml
terminal INIT_XML;
terminal INI_SOLICITUD;
terminal FIN_SOLICITUD;
terminal INI_SOLICITUDES;
terminal FIN_SOLICITUDES;
terminal NOMBRE_SOLICITUD;
//seccion tipo json
terminal KEY;
terminal ID;
terminal BLOQUE_PARAMETROS;

terminal MENOR;
terminal MAYOR;
terminal OP;
terminal DOT;
terminal QT_MARK;
terminal BRACE_A;
terminal BRACE_C;
terminal BRACKET_A;
terminal BRACKET_C;
terminal COLON;
terminal ADMIRACION;
terminal QUERY;
//reportereia
//terminal SELECT;
//terminal TO;
//terminal FORM;
//terminal FLECHA;
//terminal WHERE;
//terminal AND;
//terminal OR;
terminal DESCONOCIDO;

nonterminal String inicio;
nonterminal String single;
nonterminal String multiple;

nonterminal String encabezado_x;
nonterminal String cuerpo_x;
nonterminal String fin_x;

nonterminal String encabezado_multiple;
nonterminal String cuerpo_multiple;
nonterminal String fin_multiple;
nonterminal String lst_parametros;
nonterminal String parametros;
nonterminal String parametros_fac;
//nonterminal String menor_admiracion;
nonterminal String mayor_admiracion;
nonterminal String contenedor_cuerpo_x;
nonterminal String ini_solicitud;
nonterminal String key;

//terminales que atraparan los errores

nonterminal String brace_a;
nonterminal String brace_c;
nonterminal String bracket_a;
nonterminal String bracket_c;
nonterminal String dot;
nonterminal String colon;
nonterminal String bloque_cuerpo_x;
nonterminal String desc_bloque;
nonterminal String bloque;
nonterminal String bloque_lst_parametros;
nonterminal String tipo_solicitud;
nonterminal String id;
nonterminal String id_;
nonterminal String nombre_solicitud;
nonterminal String menor;
nonterminal String fin_solicitud;
nonterminal String mayor;


nonterminal String usuario;
nonterminal String form;
nonterminal String compo;
nonterminal String cantidad;
nonterminal String admiracion;

nonterminal String cuerpo_factorizado;	
nonterminal String cuerpo_solicitud;
nonterminal String ciclo;
nonterminal String varias;



inicio 				::=   single | multiple;

single 				::=   encabezado_x  contenedor_cuerpo_x  fin_x;

varias 				::= single | varias single;


										
encabezado_x	 	::=  menor admiracion ini_solicitud dot {:tipoInstruccion(); :} nombre_solicitud mayor;

	contenedor_cuerpo_x ::= brace_a  cuerpo_x  brace_c;
	cuerpo_x 			::=  desc_bloque bloque_cuerpo_x  ;
	desc_bloque	        ::=  bloque  ;
	bloque_cuerpo_x	    ::= dot lst_parametros ;
	lst_parametros 		::= bracket_a  bloque_lst_parametros bracket_c;
	bloque_lst_parametros::= brace_a parametros brace_c ;
	parametros 			::=  {: System.out.println(getCur_token()); crearKeyToken(); :} key   dot:e {: crearValueToken(); :} id  parametros_fac;
	parametros_fac 		::= COLON parametros 
						  |
						  ;
fin_x 				::=menor fin_solicitud ADMIRACION mayor {:Verificador.contSolicitud++; System.out.println("aumnto "+Verificador.contSolicitud); :};



						
multiple 	  			::= encabezado_multiple varias  fin_multiple;
									
	encabezado_multiple	 	::=  menor admiracion INI_SOLICITUDES mayor ;

fin_multiple 			::= MENOR FIN_SOLICITUDES mayor_admiracion;


admiracion 			::= ADMIRACION;
menor 				::= MENOR|error;
fin_solicitud 		::= FIN_SOLICITUD |error;
id 					::= id_|key;
id_ 				::= ID ;
nombre_solicitud 	::= NOMBRE_SOLICITUD | error;
key 				::= KEY |error;
mayor 				::= MAYOR|error;
mayor_admiracion 	::= ADMIRACION  mayor |{: System.out.println("error_mayor_admiracion "); :}error;
bloque 				::= BLOQUE_PARAMETROS;//|{: System.out.println("error "); :}error;
dot 				::= DOT |error;
brace_a 			::= BRACE_A|error;
brace_c 			::= BRACE_C|error;
bracket_c 			::= BRACKET_C|error;
bracket_a 			::= BRACKET_A|error;
//colon 				::= COLON|error;
ini_solicitud 		::= INI_SOLICITUD|error;